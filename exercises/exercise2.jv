// Originally following the Car example 
// My gooal 
// 1. Build an automated data pipeline for the following source:
// https://www.govdata.de/web/guest/suchen/-/details/stadt-neuss-baumpflanzungen-2023


// We are only interested in “Vogelsang”, valid stadtteil start with "Vogelsang"
// Drop "baumart_deutsch" column  Drop all rows with invalid values
// Assign fitting built-in SQLite types (e.g., BIGINT, TEXT or FLOAT) to all other columns
// Do not rename column names
// No further data validation is required, do not drop any rows or change any data points
// Write data into a SQLite database called “trees.sqlite”, in the table “trees”

// Defining a single pipeline to process tree plantation data


pipeline TreesPipeline {
  // 2. We describe the structure of the pipeline,
  // the top of the pipeline by connecting blocks via pipes. 
  // 3. Syntax of a pipe
    TreesExtractor
        ->TreesTextFileInterpreter;

  // 4. The output of the preceding block is hereby used 
  // as input for the succeeding block.
  // 5. Pipes can be further chained, 
  // leading to an overview of the pipelin

    TreesTextFileInterpreter
        ->TreesCSVInterpreter
        ->TreesTableInterpreter
        ->TreesLoader;

    block TreesExtractor oftype HttpExtractor {

        url: "https://opendata.rhein-kreis-neuss.de/api/v2/catalog/datasets/stadt-neuss-herbstpflanzung-2023/exports/csv";
    }


    block TreesTextFileInterpreter oftype TextFileInterpreter { }

    block TreesCSVInterpreter oftype CSVInterpreter {
        delimiter: ";"; // from block type CSVInterpreter an input file as a csv-file containing string-values delimited by ; and outputs Sheet.
    }

//  interested in “Vogelsang”, valid stadtteil start with "Vogelsang" 
// "id" contains geopoints with the following pattern {geo-coordinate 1}, {geo-coordinate 2} a geo-coordinate is defined as {1-3 numbers}.{numbers}
///USING
    // Primitive value types are based on built-in value types and use a collection of constraints to restrict the range of valid values. 
    // Such constraints are implicitly connected via a logical AND relation.
    // Note that the constraints need to be applicable to the base-type of the value type - indicated by the identifier after the keyword oftype:

    valuetype Stadtteil_Constraint_ON oftype text {
    constraints: [
        Stadtteil_Constraint,
    ];
    }
    // only allow here  Vogelsang Bols-Siedlung  Vogelsang
    constraint Stadtteil_Constraint oftype AllowlistConstraint {
        allowlist: ["Vogelsang Bols-Siedlung" ,"Vogelsang" ];
    }

    valuetype Id_Constraint_ON oftype text {
    constraints: [
        Id_Constraint,
    ];}

// Combine RegexConstraint with Primitive Value syntax
// RegexConstraint Compatible value type: text Example 1 publish constraint IPv4Format oftype RegexConstraint {regex: /^((25[0-5]|(2[0-4]|1\d|[1-9]|)\d)\.?\b){4}$/;
// Text that complies with the IPv4 address format.

    constraint Id_Constraint oftype RegexConstraint { regex: /\d{1,3}\.\d+\s*,\s*\d{1,3}\.\d+/;}
// Matches two floating-point numbers (each with 1-3 digits before and one or more digits after the decimal point), separated by a comma with optional white spaces \s*.

  // 6. As a next step, we interpret the sheet as a table by adding structure.
  // We define a value type per column that specifies the data type of the column.
  // Rows that include values that are not valid according to the their value types are dropped automatically.

    block TreesTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "lfd_nr" oftype integer,
            "stadtteil" oftype Stadtteil_Constraint_ON,
            "standort" oftype text,
            "baumart_botanisch" oftype text,
            "id" oftype Id_Constraint_ON,
            "baumfamilie" oftype text,
        ];
    }

  // 7. As a last step, we load the table into a sink,
  //Write data into a SQLite database called “trees.sqlite”, in the table “trees”
    block TreesLoader oftype SQLiteLoader {
        table: "trees";
        file: "trees.sqlite";
    }
}
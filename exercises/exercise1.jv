// Originally following the Car example 
// My gola 
// Write data into a SQLite database called “airports.sqlite”, in the table “airports”
// Do not save the following columns: Zeitzone, DST, Zeitzonen-Datenbank, geo_punkt
// Assign fitting built-in SQLite types (e.g., BIGINT, TEXT or FLOAT) to all other columns
// Do not rename column names
// No further data validation is required, do not drop any rows or change any data points

pipeline AirportsPipelineZaian {

  // 2. We describe the structure of the pipeline,
  // the top of the pipeline by connecting blocks via pipes. 
  // 3. Syntax of a pipe
  AirportsExtractor
    -> AirportsTextFileInterpreter;

  // 4. The output of the preceding block is hereby used 
  // as input for the succeeding block.

  // 5. Pipes can be further chained, 
  // leading to an overview of the pipeline.
  AirportsTextFileInterpreter
    -> AirportsCSVInterpreter
    -> AirportsTableInterpreter
    -> AirportsLoader;

  block AirportsExtractor oftype HttpExtractor {
    url: "https://opendata.rhein-kreis-neuss.de/api/explore/v2.1/catalog/datasets/rhein-kreis-neuss-flughafen-weltweit/exports/csv?lang=en&timezone=Europe%2FBerlin&use_labels=true&delimiter=%3B";
  }


  block AirportsTextFileInterpreter oftype TextFileInterpreter { }

  block AirportsCSVInterpreter oftype CSVInterpreter {
    delimiter: ";";  // from block type CSVInterpreter an input file as a csv-file containing string-values delimited by ; and outputs Sheet.
  }

  // 6. As a next step, we interpret the sheet as a table by adding structure.
  // We define a value type per column that specifies the data type of the column.
  // Rows that include values that are not valid according to the their value types are dropped automatically. 
  block AirportsTableInterpreter oftype TableInterpreter {
    // Do not save the following columns: Zeitzone, DST, Zeitzonen-Datenbank, geo_punkt
                  //Lfd. Nummer;Name des Flughafens;Ort;Land;IATA;ICAO;Latitude;Longitude;Altitude;Zeitzone;DST;Zeitzonen-Datenbank;geo_punkt
    // e.g of data 11110;Pocono Mountains Municipal Airport;Mount Pocono;United States;0;KMPO;41.13750076;-75.37889862;584;-5.0;A;0;41.13750076

    header: true;
    columns: [
      "Lfd. Nummer" oftype integer,
      "Name des Flughafens" oftype text,
      "Ort" oftype text,
      "Land" oftype text,
      "IATA" oftype text, // Initially thought it is integer but looking in the data carefully it contains 3 letters like FNA, AIK
      "ICAO" oftype text,
      "Latitude" oftype decimal,
      "Longitude" oftype decimal,
      "Altitude" oftype integer 
    ];
  }


  // 7. As a last step, we load the table into a sink,
  //Write data into a SQLite database called “airports.sqlite”, in the table “airports”
  block AirportsLoader oftype SQLiteLoader {
    table: "airports";
    file: "./airports.sqlite";
  }

}